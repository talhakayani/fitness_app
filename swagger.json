{
  "swagger": "2.0",
  "info": {
    "description": "This is simple demo application for practice purpose. In this application I will design API provides the details of the exercise and users",
    "version": "1.0.0",
    "title": "Fitness Application",
    "contact": {
      "email": "talha.kayani@invozone.com"
    }
  },
  "tags": [
    {
      "name": "exercise",
      "description": "This will give the details of all the exercies"
    },
    {
      "name": "user",
      "description": "This will give the details of all the users "
    }
  ],
  "paths": {
    "/exercise": {
      "post": {
        "tags": ["exercise"],
        "summary": "Add new Exercise to the database",
        "decription": "It allows end-user to add new exercise to the database",
        "operationId": "addExercise",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Exercise object that needs to be added",
            "required": true,
            "schema": {
              "#ref": "#definitions/Exercise",
              "example": {
                "ex_name": "Push Ups",
                "no_of_repetitions": 12,
                "time": "30 seconds"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exercise added succesfully"
          },
          "400": {
            "description": "Unable to add the exercise"
          }
        }
      }
    },
    "/exercise/all": {
      "get": {
        "tags": ["exercise"],
        "summary": "Retrive all the exercises avaiable in the database",
        "descriptions": "Get all the exercises",
        "operationId": "getAllExercises",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Exercises reterived succesfully",
            "schema": {
              "#ref": "#definitions/Exercise",
              "example": [
                { "ex_name": "Exercise 1" },
                { "ex_name": "Exercise 1" }
              ]
            }
          },
          "400": {
            "description": "No exercise found",
            "schema": {
              "#ref": "#definitions/Error",
              "example": { "status": "400", "message": "No Exercise found" }
            }
          }
        }
      }
    },
    "/exercise/{id}": {
      "get": {
        "tags": ["exercise"],
        "descriptions": "This will reterive the exercise with given id",
        "summary": "Reterive the exercise related to given ID",
        "operationId": "getExerciseById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Please provide the exercise id for which you need the information",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Exercise reterived succesfully",
            "schema": {
              "#ref": "#definitions/Exercise",
              "example": {
                "ex_name": "Exercise 1",
                "no_of_repetitions": 1,
                "time": "30 seconds"
              }
            }
          },
          "400": {
            "description": "Exercise reterived succesfully"
          }
        }
      }
    },
    "/exercise/all/{name}": {
      "get": {
        "tags": ["exercise"],
        "summary": "Get information about exercise ny name",
        "descriptions": "This will gives you information about the exercise searched by name",
        "operationId": "getExerciseByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the exercise you want to search, it is case sensitive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "user found!"
          },
          "400": {
            "description": "No user found!"
          }
        }
      }
    },
    "/exercise/{id}/update": {
      "put": {
        "tags": ["exercise"],
        "summary": "Update exercise on given id",
        "description": "Update information given by the end-user on specific id",
        "operationId": "updateExerciseById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the given information will be Updated for exercise having id equals to provided in path",
            "required": false,
            "schema": {
              "#ref": "#definitions/Exercise",
              "example": {
                "ex_name": "Exercise 1",
                "no_of_repetitions": 1,
                "time": "30 seconds"
              }
            }
          },
          {
            "in": "path",
            "nam": "id",
            "description": "id of the user",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Record Updated!"
          },
          "400": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/exercise/{id}/delete": {
      "delete": {
        "tags": ["exercise"],
        "summary": "Delete exercise",
        "description": "It will delete exercises having id equals to given id to the path",
        "operationId": "deleteExerciseById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Exercise Deleted"
          },
          "400": {
            "description": "Something went wrong!"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Add new User to the database",
        "decription": "It allows end-user to add new User to the database",
        "operationId": "addUser",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added",
            "required": true,
            "schema": {
              "#ref": "#definitions/User",
              "example": {
                "name": "user 1",
                "age": 1,
                "height": 5.11,
                "weight": 85
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User added succesfully"
          },
          "400": {
            "description": "Unable to add the User"
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "tags": ["user"],
        "summary": "Retrive all the users avaiable in the database",
        "descriptions": "Get all the users",
        "operationId": "getAllUsers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Exercises reterived succesfully",
            "schema": {
              "#ref": "#definitions/User",
              "example": [{ "ex_name": "User 1" }, { "ex_name": "User 1" }]
            }
          },
          "400": {
            "description": "No User found",
            "schema": {
              "#ref": "#definitions/Error",
              "example": { "status": "400", "message": "No User found" }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["user"],
        "descriptions": "This will reterive the user with given id",
        "summary": "Reterive the user related to given ID",
        "operationId": "getUserById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Please provide the user id for which you need the information",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "user reterived succesfully",
            "schema": {
              "#ref": "#definitions/User",
              "example": {
                "name": "user 1",
                "age": 1,
                "height": 5.11,
                "weight": 85
              }
            }
          }
        }
      }
    },
    "/user/all/{name}": {
      "get": {
        "tags": ["user"],
        "summary": "Get information about user ny name",
        "descriptions": "This will gives you information about the user searched by name",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the user you want to search, it is case sensitive",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "user found!"
          },
          "400": {
            "description": "No user found!"
          }
        }
      }
    },
    "/user/{id}/update": {
      "put": {
        "tags": ["user"],
        "summary": "Update user on given id",
        "description": "Update information given by the end-user on specific id",
        "operationId": "updateUserById",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "the given information will be Updated for user having id equals to provided in path",
            "required": false,
            "schema": {
              "#ref": "#definitions/User",
              "example": {
                "name": "user 1",
                "age": 1,
                "height": 5.11,
                "weight": 85
              }
            }
          },
          {
            "in": "path",
            "nam": "id",
            "description": "id of the user",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Record Updated!"
          },
          "400": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/user/{id}/delete": {
      "delete": {
        "tags": ["user"],
        "summary": "Delete User",
        "description": "It will delete user having id equals to given id to the path",
        "operationId": "deleteUserById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User Deleted"
          },
          "400": {
            "description": "Something went wrong!"
          }
        }
      }
    }
  },
  "definitions": {
    "Exercise": {
      "type": "object",
      "properties": {
        "ex_name": {
          "type": "string",
          "description": "The name of the exercise!"
        },
        "no_of_repetitions": {
          "type": "integer",
          "description": "The number of repetitions an exercise have"
        },
        "time": {
          "type": "string",
          "description": "The time period required for an exercise, it should be in seconds"
        }
      },
      "xml": {
        "name": "Exercise"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the user"
        },
        "age": {
          "type": "integer",
          "description": "Age of the user"
        },
        "height": {
          "type": "float",
          "description": "Height of the user, it should be in feets"
        },
        "weight": {
          "type": "float",
          "description": "Weight of the user, it should be in kilograms"
        }
      },
      "xml": {
        "name": "Exercise"
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of response from the server"
        },
        "message": {
          "type": "string",
          "description": "Message response from the server if there is any error"
        }
      },
      "xml": {
        "name": "Exercise"
      }
    }
  }
}
